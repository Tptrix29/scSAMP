:py:mod:`tools.processing.factors`
==================================

.. py:module:: tools.processing.factors


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   tools.processing.factors._compactness
   tools.processing.factors._proto_concave
   tools.processing.factors._proto_convex
   tools.processing.factors._entropy_1d
   tools.processing.factors.compactness_factor
   tools.processing.factors.complexity_factor
   tools.processing.factors.concave_2var
   tools.processing.factors.convex_2var
   tools.processing.factors.entropy_2var



.. py:function:: _compactness(data: numpy.array) -> float


.. py:function:: _proto_concave(X: numpy.array) -> numpy.array


.. py:function:: _proto_convex(X: numpy.array) -> numpy.array


.. py:function:: _entropy_1d(X: numpy.array) -> numpy.array


.. py:function:: compactness_factor(info_data: pandas.DataFrame, numeric_arr: numpy.array, label: str) -> (pandas.Index, numpy.array)

   Compactness Factor Calculation
       compactness-factor = 1 - compactness

   :param info_data: Metadata as :class:`pandas.DataFrame` with cluster label column.
   :param numeric_arr: Numeric profile as 2-d :class:`numpy.array`.
   :param label: Column name of cluster label.

   :rtype: tuple(cluster label, compactness factor array)


.. py:function:: complexity_factor(info_data: pandas.DataFrame, numeric_arr: numpy.array, label: str) -> (pandas.Index, numpy.array)

   Complexity Factor Calculation:
       complexity-factor = complexity

   :param info_data: Metadata as :class:`pandas.DataFrame` with cluster label column.
   :param numeric_arr: Numeric profile as 2-d :class:`numpy.array`.
   :param label: Column name of cluster label.

   :rtype: tuple(cluster label, complexity factor array)


.. py:function:: concave_2var(vec1: numpy.array, vec2: numpy.array) -> numpy.array

   Concave integration of 2 factors.

   :param vec1: Factor vector as 1-d :class:`numpy.array`.
   :param vec2: Factor vector as 1-d :class:`numpy.array`.

   :rtype: Integrated factor as 1-d :class:`numpy.array`.


.. py:function:: convex_2var(vec1: numpy.array, vec2: numpy.array) -> numpy.array

   Convex integration of 2 factors.

   :param vec1: Factor vector as 1-d :class:`numpy.array`.
   :param vec2: Factor vector as 1-d :class:`numpy.array`.

   :rtype: Integrated factor as 1-d :class:`numpy.array`.


.. py:function:: entropy_2var(vec1: numpy.array, vec2: numpy.array) -> numpy.array

   Integration of 2 factors with entropy weight.

   :param vec1: Factor vector as 1-d :class:`numpy.array`.
   :param vec2: Factor vector as 1-d :class:`numpy.array`.

   :rtype: Integrated factor as 1-d :class:`numpy.array`.


