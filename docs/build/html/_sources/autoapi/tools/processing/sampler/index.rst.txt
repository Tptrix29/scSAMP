:py:mod:`tools.processing.sampler`
==================================

.. py:module:: tools.processing.sampler


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   tools.processing.sampler.SamplingProcessor




.. py:class:: SamplingProcessor(reference: anndata.AnnData, cluster_col: str, ratio: Optional[float] = None, random_state: int = settings.random_state)

   Sampling Processing Class.

   .. attribute:: reference

      References dataset.

      :type: :class:`anndata.AnnData`

   .. attribute:: sampling_ratio

      Temporary sampling ratio, range in [0, 1).

      :type: float, default=None

   .. attribute:: cluster_label

      Column name of cell type label.

      :type: str

   .. attribute:: raw_count

      Cell count of raw dataset.

      :type: int

   .. attribute:: latest_label

      Sampling selection label of specific method and ratio (latest applied).

      :type: str

   .. attribute:: oversampling_dataset

      Oversampling dataset, generated by :class:`imblearn.over_sampling.SMOTE`

      :type: :class:`anndata.AnnData`

   .. attribute:: metadata

      Metadata of cluster-specific factors.

      :type: :class:`pandas.DataFrame`

   .. attribute:: random_state

      Random state.

      :type: int

   .. rubric:: Notes

   This is a beta version.

   .. rubric:: Examples

   >>> import scanpy as sc
   >>> data = sc.read_h5ad("path/to/h5ad/file")
   >>> sampler = SamplingProcessor(reference=data, cluster_col="cell_type", random_state=0)
   >>> sampler.sampling("balance")

   .. py:method:: sampling(strategy: str) -> anndata.AnnData

      Sampling function with strategy parameter.

      :param strategy: Sampling strategy chosen from :class:`tools.config.SamplingStrategy`.
      :type strategy: str, {'stratify', 'balance', 'compactness', 'complexity', 'concave', 'convex', 'entropy'}

      :rtype: Sampled dataset as :class:`anndata.AnnData` object.


   .. py:method:: _reset_ratio(ratio: float) -> None


   .. py:method:: get_target_dataset(col: Optional[str] = None) -> anndata.AnnData

      Get sampled dataset.


   .. py:method:: generate_factors() -> None

      Generate cluster-specific factors.


   .. py:method:: _check_factor(factor_type: str) -> None

      Optimize generation of specific factor.

      :param factor_type: Type of factor chosen from :class:`tools.config.SamplingStrategy`


   .. py:method:: _generate_oversampling() -> None

      Generate oversampling dataset by SMOTE.

      SMOTE is the most stable oversampling method (Generate fully-balanced dataset)


   .. py:method:: _stratify() -> anndata.AnnData

      Classical stratified sampling method.


   .. py:method:: _imbalance_sampling(target_ratio: numpy.array) -> anndata.AnnData

      Imbalanced sampling operation.

      :param target_ratio: target sampling ratio for each cluster

      :rtype: sampled dataset as :class:`anndata.AnnData` object


   .. py:method:: suggest_ratio(strategy: str, quantile: float = 0.99) -> float

      Generate suggested sampling ratio.

      :param strategy: Type of sampling strategy chosen from :class:`tools.config.SamplingStrategy`
      :param quantile: Customized quantile for hypothesis test.



